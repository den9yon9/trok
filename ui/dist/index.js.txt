// ui/src/pages/index/index.tsx
import { render } from "preact";

// ui/src/service/index.ts
import { useCallback, useEffect, useState } from "preact/hooks";
import mitt from "https://esm.sh/mitt@3.0.1";
function notifyMe(message) {
  if (!("Notification" in window)) alert("\u5F53\u524D\u6D4F\u89C8\u5668\u4E0D\u652F\u6301\u684C\u9762\u901A\u77E5");
  else if (Notification.permission === "granted") new Notification(message);
  else if (Notification.permission !== "denied") {
    Notification.requestPermission().then((permission) => {
      if (permission === "granted") new Notification(message);
    });
  }
}
function useWorkspace() {
  const [workspace, setWorkspace] = useState([]);
  const fetchWorkspace = useCallback(
    () => void fetch("/workspace").then((res) => res.json()).then(setWorkspace),
    []
  );
  useEffect(() => void fetchWorkspace(), []);
  return { workspace, fetchWorkspace };
}
function useTasks() {
  const [tasks, setTasks] = useState([]);
  const fetchTasks = useCallback(
    () => fetch("/task").then((res) => res.json()).then(setTasks),
    []
  );
  useEffect(() => void fetchTasks(), []);
  return { tasks, fetchTasks };
}
var Socket = class {
  static mitt = mitt();
  static client = new WebSocket(
    new URL("hub", location.href).href.replace("http", "ws")
  );
  static {
    this.client.addEventListener("message", (event) => {
      const data = JSON.parse(event.data);
      this.mitt.emit("data", data);
    });
  }
};
function useHub() {
  const [snapshots, setSnapshots] = useState([]);
  useEffect(() => {
    fetch("/hub").then((res) => res.json()).then(setSnapshots).then(
      () => {
        Socket.mitt.on("data", (data) => {
          if (data.type === "snapshot") {
            notifyMe(
              {
                pending: "\u5F00\u59CB\u5904\u7406",
                resolved: "\u5904\u7406\u5B8C\u6210",
                rejected: "\u5904\u7406\u5931\u8D25"
              }[data.data.status]
            );
            setSnapshots((snapshot) => [...snapshot, data.data]);
          }
        });
      }
    );
  }, []);
  return snapshots;
}

// ui/src/pages/index/index.tsx
import { useEffect as useEffect3 } from "preact/hooks";

// ui/src/components/TaskState.tsx
import { useEffect as useEffect2, useState as useState2 } from "preact/hooks";
import { Fragment, jsx, jsxs } from "preact/jsx-runtime";
function TaskState(props) {
  const [taskState] = props.snapshots.sort((a, b) => {
    const value = b.timestamp - a.timestamp;
    if (value !== 0) return value;
    return a.status === "pending" ? 1 : -1;
  });
  const [streamData, setStreamData] = useState2([]);
  useEffect2(() => {
    Socket.mitt.on("data", (data) => {
      if (data.type === "stream") {
        if (data.data.task.id === taskState.task.id) {
          setStreamData((value) => [...value, data.data]);
        }
      }
    });
  }, []);
  return /* @__PURE__ */ jsx(Fragment, { children: /* @__PURE__ */ jsxs(
    "div",
    {
      className: `flex flex-col items-start chat chat-start mb-5`,
      children: [
        /* @__PURE__ */ jsxs("div", { className: "chat-header opacity-50 mb-1 text-xs ", children: [
          taskState.task.origin,
          /* @__PURE__ */ jsx("span", { className: "text-xs badge badge-xs badge-primary mx-2", children: taskState.task.branch }),
          /* @__PURE__ */ jsx("span", { className: "kbd kbd-xs", children: taskState.task.selector })
        ] }),
        /* @__PURE__ */ jsxs(
          "div",
          {
            className: `chat-bubble min-w-80 relative chat-bubble-${{
              pending: "neutral",
              resolved: "success",
              rejected: "error"
            }[taskState.status]}`,
            children: [
              taskState.message,
              taskState.commits?.length ? /* @__PURE__ */ jsxs(Fragment, { children: [
                /* @__PURE__ */ jsx("h6", { children: "\u63D0\u4EA4\u8BB0\u5F55" }),
                /* @__PURE__ */ jsx("ul", { className: "text-xs", children: taskState.commits.map(
                  (commitItem) => /* @__PURE__ */ jsxs("li", { children: [
                    "\u2726 ",
                    commitItem
                  ] })
                ) })
              ] }) : null,
              taskState.packages?.length ? /* @__PURE__ */ jsxs(Fragment, { children: [
                /* @__PURE__ */ jsx("h6", { children: "\u9879\u76EE\u5217\u8868" }),
                /* @__PURE__ */ jsx("ul", { className: "text-xs", children: taskState.packages?.map((packageItem) => {
                  const packageStream = streamData.filter(
                    (item) => item.packagePath === packageItem.path
                  );
                  return /* @__PURE__ */ jsxs(Fragment, { children: [
                    /* @__PURE__ */ jsxs("li", { className: "text-sm flex items-center gap-2", children: [
                      {
                        pending: packageStream.length ? /* @__PURE__ */ jsx("span", { className: "loading loading-spinner text-warning loading-xs" }) : /* @__PURE__ */ jsx("span", { className: "text-warning", children: "-" }),
                        rejected: /* @__PURE__ */ jsx("span", { className: "text-error", children: "\u2717" }),
                        resolved: /* @__PURE__ */ jsx("span", { className: "text-primary", children: "\u2713" })
                      }[packageItem.status],
                      " ",
                      packageItem.path
                    ] }),
                    packageStream.length > 0 && packageItem.status === "pending" && /* @__PURE__ */ jsx(
                      "pre",
                      {
                        title: "stream",
                        className: "overflow-x-scroll bg-secondary-content rounded text-info p-2 my-2 max-h-80 max-w-5xl",
                        ref: (el) => el?.scrollTo(0, el.scrollHeight),
                        children: /* @__PURE__ */ jsx("code", { children: packageStream.map((item) => item.data) })
                      }
                    ),
                    packageItem.logs && /* @__PURE__ */ jsx("div", { className: "text-xs", children: packageItem.logs instanceof Error ? /* @__PURE__ */ jsx("pre", { className: "bg-error-content rounded text-error p-2 my-2 overflow-x-scroll max-h-80 max-w-5xl", children: packageItem.logs }) : /* @__PURE__ */ jsxs(Fragment, { children: [
                      /* @__PURE__ */ jsx(
                        "pre",
                        {
                          title: "stdout",
                          className: "overflow-x-scroll bg-info-content rounded text-info p-2 my-2 max-h-80 max-w-5xl",
                          ref: (el) => el?.scrollTo(0, el.scrollHeight),
                          children: /* @__PURE__ */ jsx("code", { children: packageItem.logs.stdout })
                        }
                      ),
                      /* @__PURE__ */ jsx(
                        "pre",
                        {
                          title: "signal",
                          class: "bg-primary-content",
                          children: packageItem.logs.signal
                        }
                      ),
                      /* @__PURE__ */ jsx(
                        "pre",
                        {
                          title: "stderr",
                          className: "overflow-x-scroll bg-error-content rounded text-error p-2 my-2 max-h-80 max-w-5xl",
                          ref: (el) => el?.scrollTo(0, el.scrollHeight),
                          children: /* @__PURE__ */ jsx("code", { children: packageItem.logs.stderr })
                        }
                      )
                    ] }) })
                  ] });
                }) })
              ] }) : null
            ]
          }
        ),
        /* @__PURE__ */ jsx("div", { className: "chat-footer opacity-50 text-xs mt-1", children: new Date(taskState.timestamp).toLocaleString() })
      ]
    }
  ) });
}

// ui/src/pages/index/index.tsx
import { jsx as jsx2, jsxs as jsxs2 } from "preact/jsx-runtime";
function Workspace(props) {
  const { workspace } = useWorkspace();
  return /* @__PURE__ */ jsx2("div", { className: "flex flex-col gap-2 w-fit", children: workspace.map((item) => {
    return /* @__PURE__ */ jsxs2(
      "form",
      {
        className: "shadow bg-base-100 rounded-2xl p-2 flex flex-col gap-2 border-primary",
        onSubmit: (e) => {
          e.preventDefault();
          const form = new FormData(e.currentTarget);
          props.onCreateTask(
            item.origin,
            item.branch,
            form.get("selector")
          );
          e.currentTarget.reset();
        },
        children: [
          /* @__PURE__ */ jsxs2(
            "div",
            {
              tabIndex: 0,
              className: "collapse bg-base-200 collapse-arrow border",
              children: [
                /* @__PURE__ */ jsxs2("div", { className: "collapse-title", children: [
                  /* @__PURE__ */ jsx2("span", { children: item.origin }),
                  /* @__PURE__ */ jsx2("span", { className: "badge badge-primary badge ml-2", children: item.branch })
                ] }),
                /* @__PURE__ */ jsx2("div", { className: "collapse-content flex flex-wrap gap-1", children: item.packages.map((item2) => /* @__PURE__ */ jsx2(
                  "div",
                  {
                    className: "badge badge-outline badge-accent-content",
                    children: item2
                  },
                  item2
                )) })
              ]
            }
          ),
          /* @__PURE__ */ jsx2(
            "input",
            {
              type: "text",
              name: "selector",
              required: true,
              placeholder: "HEAD^...HEAD",
              className: "input input-bordered input input-sm"
            }
          ),
          /* @__PURE__ */ jsx2("button", { className: "btn btn-primary self-end btn-sm", children: "\u6DFB\u52A0\u4EFB\u52A1" })
        ]
      },
      item.path
    );
  }) });
}
function TaskList(props) {
  return /* @__PURE__ */ jsx2("div", { className: "stack fixed bottom-2 right-2", children: props.tasks.map((item) => {
    return /* @__PURE__ */ jsxs2("div", { className: "shadow rounded-lg p-4 bg-base-100 border text-center text-sm", children: [
      item.origin,
      /* @__PURE__ */ jsx2("span", { className: "badge badge-primary badge-sm mx-2", children: item.branch }),
      /* @__PURE__ */ jsx2("span", { className: "kbd kbd-sm", children: item.selector })
    ] });
  }) });
}
function Main() {
  const snapshots = useHub();
  const snapShotGroups = Object.values(
    Object.groupBy(snapshots, (item) => item.task.id)
  );
  const { tasks, fetchTasks } = useTasks();
  useEffect3(() => {
    Socket.mitt.on("data", (data) => {
      if (data.type === "snapshot") void fetchTasks();
    });
  }, []);
  return /* @__PURE__ */ jsxs2("div", { className: "flex gap-2 w-screen", children: [
    /* @__PURE__ */ jsx2("div", { className: "p-2 bg-base-200 h-screen overflow-y-scroll w-96", children: /* @__PURE__ */ jsx2(
      Workspace,
      {
        onCreateTask: async (origin, branch, selector) => {
          await fetch("/task", {
            method: "POST",
            body: JSON.stringify({
              origin,
              branch,
              selector
            })
          });
          fetchTasks();
        }
      }
    ) }),
    /* @__PURE__ */ jsx2("div", { className: "p-2 h-screen overflow-y-scroll grow", children: snapShotGroups.map((item) => /* @__PURE__ */ jsx2(TaskState, { snapshots: item })) }),
    /* @__PURE__ */ jsx2(TaskList, { tasks })
  ] });
}
render(/* @__PURE__ */ jsx2(Main, {}), document.getElementById("root"));
